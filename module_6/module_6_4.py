
import math


class Figure:           # Класс фигура
    def __init__(self, sides, color):
        sides_count = 0                         # количество сторон (по умолчанию)
        self.__sides = sides                    # размеры
        self.__color = color                    # цвет
        self.filled = False                     # закрашен (по умолчанию)

    def get_color(self):
        # Возвращает список RGB цветов.
        return self.__color

    def __is_valid_color(self, r, g, b):
        # Метод служебный, принимает параметры r, g, b,
        # который проверяет корректность переданных значений перед установкой нового цвета.
        # Корректным цвет: все значения r, g, b - целые числа в диапазоне от 0 до 255(включительно).

        return all(isinstance(value, int) and 0 <= value <= 255 for value in (r, g, b))

    def set_color(self, r, g, b):
        # Метод принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие
        # значения, предварительно проверив их на корректность.
        # Если введены некорректные данные, то цвет остаётся прежним.
        if self.__is_valid_color(r, g, b):
            self.__color = (r, g, b)
            print("===", r, g, b)
            return
        else:
            print("---", r, g, b)
            # print("!!!!", self.__color)

    def __is_valid_sides(self):
        # метод служебный, принимает неограниченное кол-во сторон, возвращает
        # True если все стороны целые положительные числа и кол-во новых сторон совпадает с текущим,
        # False - во всех остальных случаях.

        if self.__sides >= 0:
            return True

    def get_sides(self):
        # метод возвращает значение атрибута __sides.
        return self.__sides

    def __len__(self):
        # метод возвращает периметр фигуры

        pass

    def set_sides(self, new_count):
        # метод принимает новые стороны, если их количество не равно sides_count,
        # то не изменять, в противном случае - менять.

        if new_count != self.sides_count:
            self.sides_count = new_count


class Circle(Figure):                           # Класс круг
    # Атрибуты класса Circle(sides_count = 1):
    # Каждый объект класса Circle должен обладать следующими атрибутами и методами:
    # Все атрибуты и методы класса Figure
    # Атрибут __radius, рассчитать исходя из длины окружности(одной единственной стороны).
    # Метод get_square возвращает площадь круга(можно рассчитать как через длину, так и через радиус).

    def __init__(self, sides, color):
        super().__init__(1, color)        # Количество сторон круга 1
        self.__radius = sides / (2 * math.pi)  # Радиус окружности

    def get_square(self):
        # Возвращает площадь круга, рассчитываемую как π * r^2
        return math.pi * self.__radius ** 2

    def get_radius(self):
        # Возвращает радиус круга
        return self.__radius


class Triangle(Figure):                         # Класс треугольник
    # Атрибуты класса Triangle:
    # sides_count = 3
    # Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
    # Все атрибуты и методы класса Figure
    # Метод get_square возвращает площадь треугольника.(можно рассчитать по формуле Герона)

    def __init__(self, sides, color):
        # sides — кортеж или список длиной 3, содержащий длины сторон треугольника
        # color - кортеж или список длиной 3, цвет треугольника
        super().__init__(3, color)  # Количество сторон треугольника равно 3
        self.sides = sides  # Длины сторон треугольника

    def get_square(self):
        # Рассчитывает площадь треугольника по формуле Герона:
        # Формула: S = √(p * (p - a) * (p - b) * (p - c))
        # где p — полупериметр, a, b, c — длины сторон
        a, b, c = self.sides

        # Полупериметр
        p = (a + b + c) / 2

        # Площадь по формуле Герона
        return math.sqrt(p * (p - a) * (p - b) * (p - c))


class Cube(Figure):                             # Класс куб
    # Атрибуты класса Cube:
    # sides_count = 12
    # Каждый объект класса Cube должен обладать следующими атрибутами и методами:
    # Все атрибуты и методы класса Figure.
    # Переопределить __sides сделав список из 12 одинаковых сторон(передаётся 1 сторона)
    # Метод get_volume, возвращает объём куба.

    def __init__(self, sides, color):
        super().__init__(12, color)       # Количество сторон куба 12
        self.__sides = [sides] * 12  # Список из 12 одинаковых сторон

    def get_volume(self):
        """
        Вычисляет и возвращает объём куба.
        :return: Объём куба.
        """
        side_length = self.__sides[0]  # Все стороны одинаковой длины
        return side_length ** 3

    def get_sides(self):
        """
        Возвращает список рёбер куба.
        :return: Список из 12 одинаковых сторон.
        """
        return self.__sides


# Test Class Triangle
# Создаём треугольник со сторонами 3, 4, 5 и цветом (255, 0, 0)
triangle = Triangle((3, 4, 5), (255, 0, 0))

# Получаем цвет треугольника
print("Цвет треугольника:", triangle.get_color())  # Ожидаемый вывод: (255, 0, 0)

# Получаем площадь треугольника
print("Площадь треугольника:", round(triangle.get_square(), 2))  # Ожидаемый вывод: 6.0

print("---------")


# Test Class Circle
# Создаём круг с длиной окружности 31.4 и цветом (0, 255, 0)
circle = Circle(31.4, (0, 255, 0))

# Получаем цвет треугольника
print("Цвет круга:", triangle.get_color())  # Ожидаемый вывод: (255, 0, 0)

# Получаем радиус круга
print("Радиус круга:", round(circle.get_radius(), 2))  # Ожидаемый вывод: 5.0

# Получаем площадь круга
print("Площадь круга:", round(circle.get_square(), 2))  # Ожидаемый вывод: 78.54

print("---------")


# Test Class Cube
# Создаём куб с длиной стороны 4 и цветом (0, 255, 0)
cube = Cube(4, (0, 255, 0))

# Получаем цвет треугольника
print("Цвет куба:", cube.get_color())  # Ожидаемый вывод: (0, 255, 0)

# Получаем список сторон
print("Стороны куба:", cube.get_sides())  # [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]

# Вычисляем объём
print("Объём куба:", cube.get_volume())  # 64
